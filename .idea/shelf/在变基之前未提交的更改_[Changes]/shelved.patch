Index: pom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\r\n    <modelVersion>4.0.0</modelVersion>\r\n    <parent>\r\n        <groupId>org.springframework.boot</groupId>\r\n        <artifactId>spring-boot-starter-parent</artifactId>\r\n        <version>3.3.1</version>\r\n        <relativePath/> <!-- lookup parent from repository -->\r\n    </parent>\r\n    <groupId>org.intership</groupId>\r\n    <artifactId>clubMate</artifactId>\r\n    <version>0.0.1-SNAPSHOT</version>\r\n    <name>clubMate</name>\r\n    <description>clubMate</description>\r\n    <url/>\r\n    <licenses>\r\n        <license/>\r\n    </licenses>\r\n    <developers>\r\n        <developer/>\r\n    </developers>\r\n    <scm>\r\n        <connection/>\r\n        <developerConnection/>\r\n        <tag/>\r\n        <url/>\r\n    </scm>\r\n    <properties>\r\n        <java.version>17</java.version>\r\n    </properties>\r\n    <dependencies>\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-starter-web</artifactId>\r\n        </dependency>\r\n\r\n        <dependency>\r\n            <groupId>com.mysql</groupId>\r\n            <artifactId>mysql-connector-j</artifactId>\r\n            <scope>runtime</scope>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-starter-test</artifactId>\r\n            <scope>test</scope>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.projectlombok</groupId>\r\n            <artifactId>lombok</artifactId>\r\n            <scope>provided</scope>\r\n        </dependency>\r\n\r\n        <dependency>\r\n            <groupId>org.projectlombok</groupId>\r\n            <artifactId>lombok</artifactId>\r\n            <optional>true</optional>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.projectlombok</groupId>\r\n            <artifactId>lombok</artifactId>\r\n            <scope>provided</scope>\r\n        </dependency>\r\n\r\n    </dependencies>\r\n\r\n    <build>\r\n        <plugins>\r\n            <plugin>\r\n                <groupId>org.springframework.boot</groupId>\r\n                <artifactId>spring-boot-maven-plugin</artifactId>\r\n            </plugin>\r\n        </plugins>\r\n    </build>\r\n\r\n</project>\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pom.xml b/pom.xml
--- a/pom.xml	(revision 731e3a2c45d5be9b34f74cbc982992757e0943e7)
+++ b/pom.xml	(date 1719967666359)
@@ -50,7 +50,16 @@
             <artifactId>lombok</artifactId>
             <scope>provided</scope>
         </dependency>
-
+        <dependency>
+            <groupId>com.baomidou</groupId>
+            <artifactId>mybatis-plus-spring-boot3-starter</artifactId>
+            <version>3.5.5</version>
+        </dependency>
+        <dependency>
+        <groupId>com.baomidou</groupId>
+        <artifactId>mybatis-plus-generator</artifactId>
+        <version>3.5.5</version>
+        </dependency>
         <dependency>
             <groupId>org.projectlombok</groupId>
             <artifactId>lombok</artifactId>
Index: src/src/main/java/org/intership/clubmate/controller/UserController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/src/main/java/org/intership/clubmate/controller/UserController.java b/src/src/main/java/org/intership/clubmate/controller/UserController.java
new file mode 100644
--- /dev/null	(date 1719967666422)
+++ b/src/src/main/java/org/intership/clubmate/controller/UserController.java	(date 1719967666422)
@@ -0,0 +1,59 @@
+package org.intership.clubmate.controller;
+
+import com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;
+import com.baomidou.mybatisplus.core.toolkit.Wrappers;
+import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
+import org.intership.clubmate.entity.User;
+import org.intership.clubmate.enums.HttpCode;
+import org.intership.clubmate.pojo.ResponseResult;
+import org.intership.clubmate.service.UserService;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.stereotype.Controller;
+import org.springframework.web.bind.annotation.RequestBody;
+import org.springframework.web.bind.annotation.RequestMapping;
+import org.springframework.web.bind.annotation.RequestParam;
+
+@Controller
+@RequestMapping("/user")
+
+public class UserController {
+    @Autowired
+    private UserService userService;
+
+    @RequestMapping("/getAll")
+    public ResponseResult getAllUser(@RequestParam(defaultValue = "1") Integer pageNum,
+                                     @RequestParam(defaultValue = "10") Integer pageSize,
+                                     @RequestParam (defaultValue= "3")int rank
+                                     ){
+        Page<User> page = new Page<>(pageNum, pageSize);
+        LambdaQueryWrapper<User> queryWrapper = Wrappers.lambdaQuery();
+        if (rank == 1||rank==2) {
+            queryWrapper.eq(User::getRank,rank);
+        }
+        Page<User> userPage= userService.getAll(page,queryWrapper);
+        return ResponseResult.success(userPage);
+    }
+
+    @RequestMapping("/add")
+    public ResponseResult addUser(@RequestBody User user){
+        User res = userService.addUser(user);
+        if(res!=null){
+            //System.out.println("成功");
+            return ResponseResult.success();
+        }else return ResponseResult.error(HttpCode.SYSTEM_ERROR);
+    }
+
+    @RequestMapping("/delete")
+    public ResponseResult deleteUser(@RequestParam int id){
+        userService.deleteUser(id);
+        return ResponseResult.success();
+    }
+
+    @RequestMapping("/update")
+    public ResponseResult updateUser(@RequestBody User user){
+        User res = userService.updateUser(user);
+        if(res!=null){
+            return ResponseResult.success(res);
+        }else return ResponseResult.error(HttpCode.SYSTEM_ERROR);
+    }
+}
Index: src/src/main/java/org/intership/clubmate/utils/ServiceException.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/src/main/java/org/intership/clubmate/utils/ServiceException.java b/src/src/main/java/org/intership/clubmate/utils/ServiceException.java
new file mode 100644
--- /dev/null	(date 1719967666425)
+++ b/src/src/main/java/org/intership/clubmate/utils/ServiceException.java	(date 1719967666425)
@@ -0,0 +1,13 @@
+package org.intership.clubmate.utils;
+
+import lombok.Getter;
+
+@Getter
+public class ServiceException extends RuntimeException {
+    private final String code;
+
+    public ServiceException(String code, String msg) {
+        super(msg);
+        this.code = code;
+    }
+}
Index: src/src/main/java/org/intership/clubmate/service/UserService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/src/main/java/org/intership/clubmate/service/UserService.java b/src/src/main/java/org/intership/clubmate/service/UserService.java
new file mode 100644
--- /dev/null	(date 1719967666428)
+++ b/src/src/main/java/org/intership/clubmate/service/UserService.java	(date 1719967666428)
@@ -0,0 +1,16 @@
+package org.intership.clubmate.service;
+
+import com.baomidou.mybatisplus.core.conditions.Wrapper;
+import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
+import com.baomidou.mybatisplus.extension.service.IService;
+import org.intership.clubmate.entity.User;
+
+public interface UserService extends IService<User> {
+    public Page<User> getAll(Page<User> page,Wrapper<User> queryWrapper);
+
+    public User addUser(User user);
+
+    public void deleteUser(int id);
+
+    public User updateUser(User user);
+}
Index: src/main/resources/mapper/UserMapper.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/mapper/UserMapper.xml b/src/main/resources/mapper/UserMapper.xml
new file mode 100644
--- /dev/null	(date 1719967666375)
+++ b/src/main/resources/mapper/UserMapper.xml	(date 1719967666375)
@@ -0,0 +1,30 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
+        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
+<mapper namespace="org.intership.clubmate.mapper.UserMapper">
+
+    <!-- 通用查询映射结果 -->
+    <resultMap id="UserMap" type="org.intership.clubmate.entity.User">
+        <id column="id" property="id" />
+        <result column="name" property="name" />
+        <result column="password" property="password" />
+        <result column="sex" property="sex" />
+        <result column="avatar_url" property="avatarUrl" />
+        <result column="rank" property="rank" />
+        <result column="introduce" property="introduce" />
+    </resultMap>
+
+    <!-- 通用查询结果列 -->
+    <sql id="Base_Column_List">
+        id, name, password
+    </sql>
+
+    <update id="updateInfoByUid">
+        update user set username=#{username} where uid=#{uid}
+    </update>
+    <select id="selctById" resultMap="UserMap">
+        SELECT * FROM user WHERE id = #{id}
+    </select>
+
+
+</mapper>
\ No newline at end of file
Index: src/src/main/java/org/intership/clubmate/service/serviceImp/UserServiceImp.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/src/main/java/org/intership/clubmate/service/serviceImp/UserServiceImp.java b/src/src/main/java/org/intership/clubmate/service/serviceImp/UserServiceImp.java
new file mode 100644
--- /dev/null	(date 1719967666432)
+++ b/src/src/main/java/org/intership/clubmate/service/serviceImp/UserServiceImp.java	(date 1719967666432)
@@ -0,0 +1,57 @@
+package org.intership.clubmate.service.serviceImp;
+
+import com.baomidou.mybatisplus.core.conditions.Wrapper;
+import com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;
+import com.baomidou.mybatisplus.core.toolkit.Wrappers;
+import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
+import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;
+import org.intership.clubmate.entity.User;
+import org.intership.clubmate.mapper.UserMapper;
+import org.intership.clubmate.service.UserService;
+import org.intership.clubmate.utils.ServiceException;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.stereotype.Service;
+
+@Service
+public class UserServiceImp extends ServiceImpl<UserMapper, User> implements UserService {
+
+    @Autowired
+    private UserMapper userMapper;
+    @Override
+    public Page<User> getAll(Page<User> page,Wrapper<User> queryWrapper) {
+
+        return userMapper.selectPage(page,queryWrapper);
+    }
+
+    @Override
+    public User addUser(User user) {
+        User res =userMapper.selectOne(Wrappers.<User>lambdaQuery()
+                .eq(User::getId,user.getId()));
+        if(res!=null){
+            throw new ServiceException("501","用户已存在");
+        }else{
+            userMapper.insert(user);
+        }
+        return user;
+    }
+
+    @Override
+    public void deleteUser(int id) {
+        LambdaQueryWrapper<User> queryWrapper = new LambdaQueryWrapper<>();
+        queryWrapper.eq(User::getId,id);
+        User res =userMapper.selectOne(queryWrapper);
+        if(res==null){
+            throw new ServiceException("505","用户不存在");
+        }else userMapper.delete(queryWrapper);
+    }
+
+    @Override
+    public User updateUser(User user) {
+        User res =userMapper.selectOne(Wrappers.<User>lambdaQuery()
+                .eq(User::getId,user.getId()));
+        if(res==null){
+            throw new ServiceException("505","用户不存在");
+        }else userMapper.updateById(user);
+        return user;
+    }
+}
Index: src/src/main/resources/application.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>ISO-8859-1
===================================================================
diff --git a/src/src/main/resources/application.properties b/src/src/main/resources/application.properties
new file mode 100644
--- /dev/null	(date 1719967666407)
+++ b/src/src/main/resources/application.properties	(date 1719967666407)
@@ -0,0 +1,8 @@
+spring.application.name=clubMate
+
+spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
+spring.datasource.url=jdbc:mysql://localhost:3306/clubmate?useSSL=false&serverTimezone=UTC
+spring.datasource.username=root
+spring.datasource.password=123456
+
+mybatis.mapper-locations=classpath:mapper/**Mapper.xml
\ No newline at end of file
Index: src/src/test/java/org/intership/clubmate/ClubMateApplicationTests.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/src/test/java/org/intership/clubmate/ClubMateApplicationTests.java b/src/src/test/java/org/intership/clubmate/ClubMateApplicationTests.java
new file mode 100644
--- /dev/null	(date 1719967666404)
+++ b/src/src/test/java/org/intership/clubmate/ClubMateApplicationTests.java	(date 1719967666404)
@@ -0,0 +1,13 @@
+package org.intership.clubmate;
+
+import org.junit.jupiter.api.Test;
+import org.springframework.boot.test.context.SpringBootTest;
+
+@SpringBootTest
+class ClubMateApplicationTests {
+
+    @Test
+    void contextLoads() {
+    }
+
+}
Index: src/src/main/resources/mapper/UserMapper.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/src/main/resources/mapper/UserMapper.xml b/src/src/main/resources/mapper/UserMapper.xml
new file mode 100644
--- /dev/null	(date 1719967666410)
+++ b/src/src/main/resources/mapper/UserMapper.xml	(date 1719967666410)
@@ -0,0 +1,30 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
+        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
+<mapper namespace="org.intership.clubmate.mapper.UserMapper">
+
+    <!-- 通用查询映射结果 -->
+    <resultMap id="UserMap" type="org.intership.clubmate.entity.User">
+        <id column="id" property="id" />
+        <result column="name" property="name" />
+        <result column="password" property="password" />
+        <result column="sex" property="sex" />
+        <result column="avatar_url" property="avatarUrl" />
+        <result column="rank" property="rank" />
+        <result column="introduce" property="introduce" />
+    </resultMap>
+
+    <!-- 通用查询结果列 -->
+    <sql id="Base_Column_List">
+        id, name, password
+    </sql>
+
+    <update id="updateInfoByUid">
+        update user set username=#{username} where uid=#{uid}
+    </update>
+    <select id="selctById" resultMap="UserMap">
+        SELECT * FROM user WHERE id = #{id}
+    </select>
+
+
+</mapper>
\ No newline at end of file
Index: src/src/main/java/org/intership/clubmate/pojo/ResponseResult.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/src/main/java/org/intership/clubmate/pojo/ResponseResult.java b/src/src/main/java/org/intership/clubmate/pojo/ResponseResult.java
new file mode 100644
--- /dev/null	(date 1719967666415)
+++ b/src/src/main/java/org/intership/clubmate/pojo/ResponseResult.java	(date 1719967666415)
@@ -0,0 +1,101 @@
+package org.intership.clubmate.pojo;
+
+import com.fasterxml.jackson.annotation.JsonInclude;
+import lombok.Getter;
+import lombok.Setter;
+import org.intership.clubmate.enums.HttpCode;
+
+import java.io.Serializable;
+
+@Getter
+@Setter
+@JsonInclude(JsonInclude.Include.NON_NULL)
+public class ResponseResult implements Serializable {
+
+    private Integer code;
+    private String msg;
+    private Object data;
+
+    public ResponseResult() {
+        this.code = HttpCode.SUCCESS.getCode();
+        this.msg = HttpCode.SUCCESS.getMsg();
+    }
+
+    public ResponseResult(Integer code, Object data) {
+        this.code = code;
+        this.data = data;
+    }
+
+    public ResponseResult(Integer code, String msg, Object data) {
+        this.code = code;
+        this.msg = msg;
+        this.data = data;
+    }
+
+    public ResponseResult(Integer code, String msg) {
+        this.code = code;
+        this.msg = msg;
+    }
+
+    public static ResponseResult error(int code, String msg) {
+        ResponseResult result = new ResponseResult();
+        return result.errorMsg(code, msg);
+    }
+    public static ResponseResult success() {
+        return new ResponseResult();
+    }
+    public static ResponseResult success(int code, String msg) {
+        ResponseResult result = new ResponseResult();
+        return result.okMsg(code, null, msg);
+    }
+
+    public static ResponseResult success(Object data) {
+
+        ResponseResult result = setAppHttpCodeEnum(HttpCode.SUCCESS, HttpCode.SUCCESS.getMsg());
+        if(data!=null) {
+            result.setData(data);
+        }
+        return result;
+    }
+
+    public static ResponseResult error(HttpCode enums){
+        return setAppHttpCodeEnum(enums,enums.getMsg());
+    }
+
+    public static ResponseResult error(HttpCode enums, String msg){
+        return setAppHttpCodeEnum(enums,msg);
+    }
+
+    public static ResponseResult setAppHttpCodeEnum(HttpCode enums){
+        return success(enums.getCode(),enums.getMsg());
+    }
+
+    private static ResponseResult setAppHttpCodeEnum(HttpCode enums, String msg){
+        return success(enums.getCode(),msg);
+    }
+
+    public ResponseResult errorMsg(Integer code, String msg) {
+        this.code = code;
+        this.msg = msg;
+        this.data = "出现异常";
+        return this;
+    }
+
+    public ResponseResult successMsg(Integer code, Object data) {
+        this.code = code;
+        this.data = data;
+        return this;
+    }
+
+    public ResponseResult okMsg(Integer code, Object data, String msg) {
+        this.code = code;
+        this.data = data;
+        this.msg = msg;
+        return this;
+    }
+
+    public ResponseResult okMsg(Object data) {
+        this.data = data;
+        return this;
+    }
+}
Index: src/src/main/java/org/intership/clubmate/enums/HttpCode.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/src/main/java/org/intership/clubmate/enums/HttpCode.java b/src/src/main/java/org/intership/clubmate/enums/HttpCode.java
new file mode 100644
--- /dev/null	(date 1719967666418)
+++ b/src/src/main/java/org/intership/clubmate/enums/HttpCode.java	(date 1719967666418)
@@ -0,0 +1,23 @@
+package org.intership.clubmate.enums;
+import lombok.Getter;
+@Getter
+public enum HttpCode {
+
+    SUCCESS(200,"操作成功"),
+    NEED_LOGIN(401,"需要登录后操作"),
+    NO_OPERATOR_AUTH(403,"无权限操作"),
+    SYSTEM_ERROR(500,"出现错误"),
+    USERNAME_EXIST(501,"用户名已存在"),
+    CLUBNAME_EXIST(502,"社团名已存在"),
+    LOGIN_ERROR(503,"用户名或密码错误"),
+    CONTENT_NOT_NULL(504, "填写内容不能为空");
+
+    final int code;
+    final String msg;
+    HttpCode(int code, String message) {
+        this.code = code;
+        this.msg = message;
+    }
+
+
+}
Index: src/main/java/org/intership/clubmate/service/UserService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/intership/clubmate/service/UserService.java b/src/main/java/org/intership/clubmate/service/UserService.java
new file mode 100644
--- /dev/null	(date 1719967666391)
+++ b/src/main/java/org/intership/clubmate/service/UserService.java	(date 1719967666391)
@@ -0,0 +1,16 @@
+package org.intership.clubmate.service;
+
+import com.baomidou.mybatisplus.core.conditions.Wrapper;
+import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
+import com.baomidou.mybatisplus.extension.service.IService;
+import org.intership.clubmate.entity.User;
+
+public interface UserService extends IService<User> {
+    public Page<User> getAll(Page<User> page,Wrapper<User> queryWrapper);
+
+    public User addUser(User user);
+
+    public void deleteUser(int id);
+
+    public User updateUser(User user);
+}
Index: src/main/java/org/intership/clubmate/service/serviceImp/UserServiceImp.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/intership/clubmate/service/serviceImp/UserServiceImp.java b/src/main/java/org/intership/clubmate/service/serviceImp/UserServiceImp.java
new file mode 100644
--- /dev/null	(date 1719967666394)
+++ b/src/main/java/org/intership/clubmate/service/serviceImp/UserServiceImp.java	(date 1719967666394)
@@ -0,0 +1,57 @@
+package org.intership.clubmate.service.serviceImp;
+
+import com.baomidou.mybatisplus.core.conditions.Wrapper;
+import com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;
+import com.baomidou.mybatisplus.core.toolkit.Wrappers;
+import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
+import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;
+import org.intership.clubmate.entity.User;
+import org.intership.clubmate.mapper.UserMapper;
+import org.intership.clubmate.service.UserService;
+import org.intership.clubmate.utils.ServiceException;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.stereotype.Service;
+
+@Service
+public class UserServiceImp extends ServiceImpl<UserMapper, User> implements UserService {
+
+    @Autowired
+    private UserMapper userMapper;
+    @Override
+    public Page<User> getAll(Page<User> page,Wrapper<User> queryWrapper) {
+
+        return userMapper.selectPage(page,queryWrapper);
+    }
+
+    @Override
+    public User addUser(User user) {
+        User res =userMapper.selectOne(Wrappers.<User>lambdaQuery()
+                .eq(User::getId,user.getId()));
+        if(res!=null){
+            throw new ServiceException("501","用户已存在");
+        }else{
+            userMapper.insert(user);
+        }
+        return user;
+    }
+
+    @Override
+    public void deleteUser(int id) {
+        LambdaQueryWrapper<User> queryWrapper = new LambdaQueryWrapper<>();
+        queryWrapper.eq(User::getId,id);
+        User res =userMapper.selectOne(queryWrapper);
+        if(res==null){
+            throw new ServiceException("505","用户不存在");
+        }else userMapper.delete(queryWrapper);
+    }
+
+    @Override
+    public User updateUser(User user) {
+        User res =userMapper.selectOne(Wrappers.<User>lambdaQuery()
+                .eq(User::getId,user.getId()));
+        if(res==null){
+            throw new ServiceException("505","用户不存在");
+        }else userMapper.updateById(user);
+        return user;
+    }
+}
Index: src/src/main/java/org/intership/clubmate/mapper/UserMapper.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/src/main/java/org/intership/clubmate/mapper/UserMapper.java b/src/src/main/java/org/intership/clubmate/mapper/UserMapper.java
new file mode 100644
--- /dev/null	(date 1719967666435)
+++ b/src/src/main/java/org/intership/clubmate/mapper/UserMapper.java	(date 1719967666435)
@@ -0,0 +1,12 @@
+package org.intership.clubmate.mapper;
+
+import com.baomidou.mybatisplus.core.mapper.BaseMapper;
+import org.apache.ibatis.annotations.Mapper;
+import org.intership.clubmate.entity.User;
+
+@Mapper
+public interface UserMapper extends BaseMapper<User> {
+    User findById(int id);
+
+    User updateByUid(User user);
+}
Index: src/main/java/org/intership/clubmate/controller/UserController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/intership/clubmate/controller/UserController.java b/src/main/java/org/intership/clubmate/controller/UserController.java
new file mode 100644
--- /dev/null	(date 1719967666379)
+++ b/src/main/java/org/intership/clubmate/controller/UserController.java	(date 1719967666379)
@@ -0,0 +1,59 @@
+package org.intership.clubmate.controller;
+
+import com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;
+import com.baomidou.mybatisplus.core.toolkit.Wrappers;
+import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
+import org.intership.clubmate.entity.User;
+import org.intership.clubmate.enums.HttpCode;
+import org.intership.clubmate.pojo.ResponseResult;
+import org.intership.clubmate.service.UserService;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.stereotype.Controller;
+import org.springframework.web.bind.annotation.RequestBody;
+import org.springframework.web.bind.annotation.RequestMapping;
+import org.springframework.web.bind.annotation.RequestParam;
+
+@Controller
+@RequestMapping("/user")
+
+public class UserController {
+    @Autowired
+    private UserService userService;
+
+    @RequestMapping("/getAll")
+    public ResponseResult getAllUser(@RequestParam(defaultValue = "1") Integer pageNum,
+                                     @RequestParam(defaultValue = "10") Integer pageSize,
+                                     @RequestParam (defaultValue= "3")int rank
+                                     ){
+        Page<User> page = new Page<>(pageNum, pageSize);
+        LambdaQueryWrapper<User> queryWrapper = Wrappers.lambdaQuery();
+        if (rank == 1||rank==2) {
+            queryWrapper.eq(User::getRank,rank);
+        }
+        Page<User> userPage= userService.getAll(page,queryWrapper);
+        return ResponseResult.success(userPage);
+    }
+
+    @RequestMapping("/add")
+    public ResponseResult addUser(@RequestBody User user){
+        User res = userService.addUser(user);
+        if(res!=null){
+            //System.out.println("成功");
+            return ResponseResult.success();
+        }else return ResponseResult.error(HttpCode.SYSTEM_ERROR);
+    }
+
+    @RequestMapping("/delete")
+    public ResponseResult deleteUser(@RequestParam int id){
+        userService.deleteUser(id);
+        return ResponseResult.success();
+    }
+
+    @RequestMapping("/update")
+    public ResponseResult updateUser(@RequestBody User user){
+        User res = userService.updateUser(user);
+        if(res!=null){
+            return ResponseResult.success(res);
+        }else return ResponseResult.error(HttpCode.SYSTEM_ERROR);
+    }
+}
Index: src/main/java/org/intership/clubmate/utils/ServiceException.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/intership/clubmate/utils/ServiceException.java b/src/main/java/org/intership/clubmate/utils/ServiceException.java
new file mode 100644
--- /dev/null	(date 1719967666382)
+++ b/src/main/java/org/intership/clubmate/utils/ServiceException.java	(date 1719967666382)
@@ -0,0 +1,13 @@
+package org.intership.clubmate.utils;
+
+import lombok.Getter;
+
+@Getter
+public class ServiceException extends RuntimeException {
+    private final String code;
+
+    public ServiceException(String code, String msg) {
+        super(msg);
+        this.code = code;
+    }
+}
Index: src/src/main/java/org/intership/clubmate/entity/User.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/src/main/java/org/intership/clubmate/entity/User.java b/src/src/main/java/org/intership/clubmate/entity/User.java
new file mode 100644
--- /dev/null	(date 1719967666439)
+++ b/src/src/main/java/org/intership/clubmate/entity/User.java	(date 1719967666439)
@@ -0,0 +1,32 @@
+package org.intership.clubmate.entity;
+
+
+import com.baomidou.mybatisplus.annotation.IdType;
+import com.baomidou.mybatisplus.annotation.TableField;
+import com.baomidou.mybatisplus.annotation.TableId;
+import com.baomidou.mybatisplus.annotation.TableName;
+import lombok.Getter;
+import lombok.Setter;
+import lombok.experimental.Accessors;
+import java.io.Serializable;
+
+@Getter
+@Setter
+@TableName("user")
+@Accessors(chain = true)
+public class User  {
+    @TableField("id")
+    private int id;
+    @TableField("name")
+    private String name;
+    @TableField("password")
+    private String password;
+    @TableField("avatar_url")
+    private String avatarUrl;
+    @TableField("sex")
+    private int sex;
+    @TableField("`rank`")
+    private int rank;
+    @TableField("introduce")
+    private String introduce;
+}
Index: src/main/java/org/intership/clubmate/mapper/UserMapper.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/intership/clubmate/mapper/UserMapper.java b/src/main/java/org/intership/clubmate/mapper/UserMapper.java
new file mode 100644
--- /dev/null	(date 1719967666386)
+++ b/src/main/java/org/intership/clubmate/mapper/UserMapper.java	(date 1719967666386)
@@ -0,0 +1,12 @@
+package org.intership.clubmate.mapper;
+
+import com.baomidou.mybatisplus.core.mapper.BaseMapper;
+import org.apache.ibatis.annotations.Mapper;
+import org.intership.clubmate.entity.User;
+
+@Mapper
+public interface UserMapper extends BaseMapper<User> {
+    User findById(int id);
+
+    User updateByUid(User user);
+}
Index: src/src/main/java/org/intership/clubmate/ClubMateApplication.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/src/main/java/org/intership/clubmate/ClubMateApplication.java b/src/src/main/java/org/intership/clubmate/ClubMateApplication.java
new file mode 100644
--- /dev/null	(date 1719967666441)
+++ b/src/src/main/java/org/intership/clubmate/ClubMateApplication.java	(date 1719967666441)
@@ -0,0 +1,15 @@
+package org.intership.clubmate;
+
+import org.mybatis.spring.annotation.MapperScan;
+import org.springframework.boot.SpringApplication;
+import org.springframework.boot.autoconfigure.SpringBootApplication;
+
+@SpringBootApplication
+@MapperScan("org.intership.clubmate.mapper")
+public class ClubMateApplication {
+
+    public static void main(String[] args) {
+        SpringApplication.run(ClubMateApplication.class, args);
+    }
+
+}
Index: src/main/java/org/intership/clubmate/entity/User.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/intership/clubmate/entity/User.java b/src/main/java/org/intership/clubmate/entity/User.java
new file mode 100644
--- /dev/null	(date 1719967666389)
+++ b/src/main/java/org/intership/clubmate/entity/User.java	(date 1719967666389)
@@ -0,0 +1,32 @@
+package org.intership.clubmate.entity;
+
+
+import com.baomidou.mybatisplus.annotation.IdType;
+import com.baomidou.mybatisplus.annotation.TableField;
+import com.baomidou.mybatisplus.annotation.TableId;
+import com.baomidou.mybatisplus.annotation.TableName;
+import lombok.Getter;
+import lombok.Setter;
+import lombok.experimental.Accessors;
+import java.io.Serializable;
+
+@Getter
+@Setter
+@TableName("user")
+@Accessors(chain = true)
+public class User  {
+    @TableField("id")
+    private int id;
+    @TableField("name")
+    private String name;
+    @TableField("password")
+    private String password;
+    @TableField("avatar_url")
+    private String avatarUrl;
+    @TableField("sex")
+    private int sex;
+    @TableField("`rank`")
+    private int rank;
+    @TableField("introduce")
+    private String introduce;
+}
